// ============================================================================
// 
// ページ内の各ページ（NavigationBar で切り替えられるページ）の ViewModel 基底クラス
// 
// ============================================================================

// ----------------------------------------------------------------------------
// 
// ----------------------------------------------------------------------------

// ============================================================================
//  Ver.  |      更新日      |                    更新内容
// ----------------------------------------------------------------------------
//  -.--  | 2024/05/05 (Sun) | 作成開始。
//  1.00  | 2024/05/05 (Sun) | ファーストバージョン。
// ============================================================================

using CommunityToolkit.Mvvm.ComponentModel;

using Shinta.WinUi3.Views;

namespace Shinta.WinUi3.ViewModels;

internal class ControlViewModel : ObservableRecipient
{
	// ====================================================================
	// コンストラクター
	// ====================================================================

	/// <summary>
	/// メインコンストラクター
	/// </summary>
	public ControlViewModel()
	{
	}

	// ====================================================================
	// public プロパティー
	// ====================================================================

	// --------------------------------------------------------------------
	// 一般のプロパティー
	// --------------------------------------------------------------------

	/// <summary>
	/// ウィンドウ
	/// </summary>
	public WindowEx2? Window
	{
		get;
		set;
	}

	// ====================================================================
	// public 関数
	// ====================================================================

	/// <summary>
	/// イベントハンドラー：ページが選択されなくなった
	/// </summary>
	public virtual Task DeselectedAsync()
	{
		Log.Information(GetType().Name + ".DeselectedAsync()");
		return Task.CompletedTask;
	}

	/// <summary>
	/// イベントハンドラー：ページが選択された
	/// </summary>
	public virtual Task SelectedAsync()
	{
		Log.Information(GetType().Name + ".SelectedAsync()");
		return Task.CompletedTask;
	}
}
