// ============================================================================
// 
// タブアイテムの基底用 ViewModel
// 
// ============================================================================

// ----------------------------------------------------------------------------
// ウィンドウではないため、BaseViewModel を継承しない
// T はタブコントロールで扱いたい設定の型
// ----------------------------------------------------------------------------

// ============================================================================
//  Ver.  |      更新日      |                    更新内容
// ----------------------------------------------------------------------------
//  1.00  | 2022/02/06 (Sun) | オリジナルバージョン。
// (1.01) | 2022/02/09 (Wed) |   Initialize() を改善。
//  1.10  | 2022/02/13 (Sun) | ジェネリッククラスにした。
//  1.20  | 2022/02/20 (Sun) | ファイルドロップに対応。
//  1.30  | 2022/03/05 (Sat) | タブ選択に対応。
// ============================================================================

using Livet;

using System;

namespace Shinta.ViewModels
{
	internal class TabItemViewModel<T> : ViewModel
	{
		// ====================================================================
		// コンストラクター
		// ====================================================================

		// --------------------------------------------------------------------
		// メインコンストラクター
		// --------------------------------------------------------------------
		public TabItemViewModel(TabControlWindowViewModel<T> tabControlWindowViewModel, LogWriter? logWriter = null)
		{
			_tabControlWindowViewModel = tabControlWindowViewModel;
			_logWriter = logWriter;
		}

		// --------------------------------------------------------------------
		// ダミーコンストラクター（Visual Studio・TransitionMessage 用）
		// --------------------------------------------------------------------
		public TabItemViewModel()
		{
			_tabControlWindowViewModel = null!;
		}

		// ====================================================================
		// public 関数
		// ====================================================================

		// --------------------------------------------------------------------
		// 入力されているプロパティーの妥当性を確認
		// ＜例外＞ Exception
		// --------------------------------------------------------------------
		public virtual void CheckProperties()
		{
		}

		// --------------------------------------------------------------------
		// タブが選択されなくなった
		// --------------------------------------------------------------------
		public virtual void Deselected()
		{
		}

		// --------------------------------------------------------------------
		// 初期化
		// --------------------------------------------------------------------
		public virtual void Initialize()
		{
			_logWriter?.ShowLogMessage(Common.TRACE_EVENT_TYPE_STATUS, GetType().Name + " 初期化中...");
		}

		// --------------------------------------------------------------------
		// ファイルやフォルダーがドロップされた
		// --------------------------------------------------------------------
		public virtual void PathDropped(String[] pathes)
		{
		}

		// --------------------------------------------------------------------
		// プロパティーから設定に反映
		// --------------------------------------------------------------------
		public virtual void PropertiesToSettings(T destSettings)
		{
		}

		// --------------------------------------------------------------------
		// タブが選択された
		// --------------------------------------------------------------------
		public virtual void Selected()
		{
		}

		// --------------------------------------------------------------------
		// 設定をプロパティーに反映
		// --------------------------------------------------------------------
		public virtual void SettingsToProperties(T srcSettings)
		{
		}

		// ====================================================================
		// protected 変数
		// ====================================================================

		// ウィンドウのビューモデル
		protected TabControlWindowViewModel<T> _tabControlWindowViewModel;

		// ログ
		protected LogWriter? _logWriter;

		// ====================================================================
		// protected 関数
		// ====================================================================

		// --------------------------------------------------------------------
		// リソース解放
		// --------------------------------------------------------------------
		protected override void Dispose(Boolean isDisposing)
		{
			base.Dispose(isDisposing);

			_logWriter?.ShowLogMessage(Common.TRACE_EVENT_TYPE_STATUS, GetType().Name + " 破棄中...");
		}
	}
}
